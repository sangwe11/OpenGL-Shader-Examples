#version 330

layout (points) in;
layout(triangle_strip) out;
layout (max_vertices = 4) out;

uniform mat4 viewProjection;
uniform vec3 cameraPosition;

struct ParticleStage
{
	float startSpeed;
	float endSpeed;
	float startSize;
	float endSize;
	
	float startRotation;
	float endRotation;	
	float lifeTime;	
	float gravityModifier;
	
	vec4 startColor;
	
	vec4 endColor;
	
	vec3 minDirection;
	uint texture;

	vec3 maxDirection;
	int subEmitCount;	
};

layout (std140) uniform particleStageUniforms {
   ParticleStage particleStage[10];
};

out vec4 colorOut;
out vec2 uvOut;
flat out int typeOut;

in int typeIn[];
in float ageIn[];

mat4 rotationMatrix(vec3 axis, float angle)
{
    axis = normalize(axis);
    float s = sin(angle);
    float c = cos(angle);
    float oc = 1.0 - c;
    
    return mat4(oc * axis.x * axis.x + c,           oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s,  0.0,
                oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c,           oc * axis.y * axis.z - axis.x * s,  0.0,
                oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c,           0.0,
                0.0,                                0.0,                                0.0,                                1.0);
}

void main()
{
	// Calculate how far along the particles life we are
	float lifeUsed = ageIn[0] / particleStage[typeIn[0]].lifeTime;
	
	// Calculate color and size
	vec4 color = mix(particleStage[typeIn[0]].startColor, particleStage[typeIn[0]].endColor, lifeUsed);
	float size = mix(particleStage[typeIn[0]].startSize, particleStage[typeIn[0]].endSize, lifeUsed);

	// Calculate direction to camera for billboarding effect
	vec3 position = gl_in[0].gl_Position.xyz;
	vec3 toCamera = normalize(cameraPosition - position);
	
	// Rotation over time
	float rotation = mix(particleStage[typeIn[0]].startRotation, particleStage[typeIn[0]].endRotation, lifeUsed);
	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = cross(toCamera, up) * size;
	up *= size;
	
	// Add offset to make particle position the centre, not the bottom right
	position += right / 2.0;
	position -= up / 2.0;
	
	position -= right;
	gl_Position = viewProjection * vec4(position, 1.0);
	uvOut = vec2(0.0, 0.0);
	colorOut = color;
	typeOut = typeIn[0];
	EmitVertex();

	position += up;
	gl_Position = viewProjection * vec4(position, 1.0);
	uvOut = vec2(0.0, 1.0);
	colorOut = color;
	typeOut = typeIn[0];
	EmitVertex();

	position -= up;
	position += right;
	gl_Position = viewProjection * vec4(position, 1.0);
	uvOut = vec2(1.0, 0.0);
	colorOut = color;
	typeOut = typeIn[0];
	EmitVertex();

	position += up;
	gl_Position = viewProjection * vec4(position, 1.0);
	uvOut = vec2(1.0, 1.0);
	colorOut = color;
	typeOut = typeIn[0];
	EmitVertex();

	EndPrimitive();
} 
#version 330 core

layout(points) in;
layout(points) out;
layout(max_vertices = 100) out;

in int TypeIn[];
in vec3 PositionIn[];
in vec3 VelocityIn[];
in float AgeIn[];

out int TypeOut;
out vec3 PositionOut;
out vec3 VelocityOut;
out float AgeOut;

struct ParticleStage
{
	float startSpeed;
	float endSpeed;
	float startSize;
	float endSize;
	
	float startRotation;
	float endRotation;	
	float lifeTime;	
	float gravityModifier;
	
	vec4 startColor;
	
	vec4 endColor;
	
	vec3 minDirection;
	uint texture;

	vec3 maxDirection;
	int subEmitCount;
};

layout (std140) uniform particleStageUniforms {
   ParticleStage particleStage[10];
};

uniform float currentTime;
uniform float deltaTime;
uniform int noParticleStages;
uniform bool enabled;

float randhash(uint seed)
{
	uint i=(seed^12345391u)*2654435769u;
	i^=(i<<6u)^(i>>26u);
	i*=2654435769u;
	i+=(i<<5u)^(i>>12u);
	
	return (float(i) / 4294967295.0);
}

void main()
{
	uint seed = uint(currentTime);

	if(AgeIn[0] < particleStage[TypeIn[0]].lifeTime)
	{
		// Interpolate position and velocity
		float deltaTimeSecs = deltaTime / 1000.0;
		vec3 deltaPosition = deltaTimeSecs * VelocityIn[0];
		vec3 deltaVelocity = vec3(0.0, deltaTimeSecs * particleStage[TypeIn[0]].gravityModifier, 0.0);
	
		// Calculate how far along the particles life we are
		float lifeUsed = AgeIn[0] / particleStage[TypeIn[0]].lifeTime;
		
		// Calculate velocity change over time
		//deltaVelocity -= particleStage[TypeIn[0]].startSpeed - mix(particleStage[TypeIn[0]].endSpeed, particleStage[TypeIn[0]].startSpeed, lifeUsed);
		
		// Calculate new age
		float age = AgeIn[0] + deltaTime;
		
		// Exception for launcher particle when disabled
		if(TypeIn[0] == 0 && !enabled)
			age = 0.0f;
	
		// Respawn same particle
		TypeOut = TypeIn[0];
		PositionOut = PositionIn[0] + deltaPosition;
		VelocityOut = VelocityIn[0] + deltaVelocity;
		//VelocityOut = mix(particleStage[TypeIn[0]].startSpeed, particleStage[TypeIn[0]].endSpeed, lifeUsed);
		AgeOut = age;
		EmitVertex();
		EndPrimitive();
	}
	else if(TypeIn[0] < noParticleStages - 1)
	{
		int emitCount = particleStage[TypeIn[0]].subEmitCount;
	
		// Launcher always gets re-emitted as well
		if(TypeIn[0] == 0)
		{
			TypeOut = TypeIn[0];
			PositionOut = PositionIn[0];
			VelocityOut = VelocityIn[0];
			AgeOut = 0.0;
			EmitVertex();
			EndPrimitive();
			
			// Multiply emit count by life cycles passed so far
			//emitCount *= int(AgeIn[0] / particleStage[TypeIn[0]].lifeTime);
		}
		
		emitCount = clamp(emitCount, 0, 100);
		
		for(int i = 0; i < emitCount; ++i)
		{
			// Spawn the next particle stage
			TypeOut = TypeIn[0] + 1;
			VelocityOut = VelocityIn[0] + mix(particleStage[TypeIn[0] + 1].minDirection, particleStage[TypeIn[0] + 1].maxDirection, vec3(randhash(seed++), randhash(seed++), randhash(seed++))) * particleStage[TypeIn[0] + 1].startSpeed;
			PositionOut = PositionIn[0]+ VelocityOut * (deltaTime / 1000.0);
			AgeOut = 0.0;
			EmitVertex();
			EndPrimitive();
		}
	}
	
}
#version 330 core

in vec3 worldPIn;
in vec3 normalIn;
in vec3 tangentIn;
in vec3 bitangentIn;
in vec4 colorIn;
in vec3 uvIn;

layout (location = 0) out vec4 positionOut;
layout (location = 1) out vec4 diffuseOpacityOut;
layout (location = 2) out vec4 normalOut;
layout (location = 3) out vec4 specularOut;

layout(std140) uniform transformUniforms
{
	mat4 modelMat;
};

uniform bool hasNormals;
uniform bool hasTangents;
uniform bool hasBitangents;
uniform bool hasColors;
uniform bool hasUvs;

//uniform vec3 ambientColor;
//uniform vec3 specularColor;
//uniform vec3 emissiveColor;
//uniform float shininess;
//uniform float shininessStength;

// Material properties
uniform vec3 diffuseColor;
uniform float opacity;
uniform vec3 specularColor;
uniform float specularExponent;

// Diffuse texture
uniform bool hasDiffuseMap;
uniform sampler2D diffuseMap;

// Normal texture
uniform bool hasNormalMap;
uniform sampler2D normalMap;

mat3 TBN(vec3 normal, vec3 tangent)
{
	normal = normalize(normal);
	tangent = normalize(tangent);
	vec3 bitangent = normalize(cross(normal, tangent));
	
	return mat3(tangent, bitangent, normal);
}

void main()
{
	vec4 diffuseOpacity;
	vec3 normal;
	vec4 specular;
	
	// Gamma correct textures - opengl seems to remove this variable, causing segfaults when used? (linux only)
	vec3 gamma = vec3(1.0/2.2);
	
	// Diffuse + opacity
	if(hasDiffuseMap)
		diffuseOpacity = vec4(pow(texture(diffuseMap, vec2(uvIn.x, -uvIn.y)).rgb, gamma), opacity);
	else
		diffuseOpacity = vec4(diffuseColor, opacity);
		
	// Normal
	if(hasNormalMap && hasTangents)
	{
		// Convert normal map from tangent space to world space
		mat3 tangentToWorldSpace = mat3(modelMat) * TBN(normalIn, tangentIn);		
		normal = tangentToWorldSpace * (pow(texture(normalMap, vec2(uvIn.x, -uvIn.y)).rgb, gamma) * 2 - 1.0);
	}
	else
	{
		normal = mat3(modelMat) * normalIn;
	}
	
	// Specular
	specular = vec4(specularColor, specularExponent / 1000.0);
	
	// Write to textures using MRT
	positionOut = vec4(worldPIn, 1.0);
	diffuseOpacityOut = diffuseOpacity;
	normalOut = vec4(normal, 1.0);
	specularOut = specular;	
}
#version 330 core

in vec3 cameraPosition;

// Non-multisampled textures
uniform sampler2D positionIn; // position
uniform sampler2D diffuseOpacityIn; // diffuseOpacity
uniform sampler2D normalIn; // normal
uniform sampler2D specularIn; // specular

uniform vec2 screenSize;

layout(std140) uniform cameraUniforms
{
	mat4 cameraView;
	mat4 cameraProjection;
};

layout(std140) uniform transformUniforms
{
	mat4 modelMat;
};

struct PointLight
{
	vec3 position;
	vec3 color;
	float intensity;
	float ambient;
	float range;
	vec3 direction;
	float innerAngle;
	float outerAngle;
};

uniform PointLight light;

vec2 CalcUV()
{
   return gl_FragCoord.xy / screenSize;
}

float CalcAttenuation(float r, float d)
{
	// Simplified lighting attenuation whilst retaining some exponential attenuation for realism
    return max(0.0, 1.0 - (d / r));
}

vec4 CalculateLighting(vec3 position, vec4 diffuseOpacity, vec3 normal, vec4 specular)
{
	// Point light
	vec3 direction = light.position - position;

	// Distance from surface to light
	float distance = length(direction);
	
	// Normalize direction
	direction = normalize(direction);
	
	// Calculate dual cone attenuation
	float attenuation = max(0.0, 1.0 - (distance / light.range));
	float cosDir = dot(direction, -light.direction);
	float spotEffect = smoothstep(light.outerAngle, light.innerAngle, cosDir);
	attenuation *= spotEffect;
	
	// Ambient, diffuse and specular lighting
	vec3 ambientFactor = vec3(0);
	vec3 diffuseFactor = vec3(0);
	vec3 specularFactor = vec3(0);

	// Calculate ambient lighting
	ambientFactor = light.color * light.ambient;
	
	// Calculate diffuse lighting
    float diffuseCoeff = dot(normal, direction);

    if (diffuseCoeff > 0.0)
	{
		// Diffuse factor
        diffuseFactor = light.color * light.intensity * diffuseCoeff;
		
		// Specular factor
		if(specular.a > 0.0)
		{
			vec3 vertexToCamera = normalize(cameraPosition - position);
			vec3 lightReflection = normalize(reflect(direction, normal));
		
			float specularCoefficient = pow(max(0.0, dot(vertexToCamera, lightReflection)), specular.a);
			specularFactor = specularCoefficient * specular.rgb * light.color;
		}
	}
	
    vec3 lightFactor = ambientFactor + attenuation * (diffuseFactor);// + specularFactor);
	return vec4(diffuseOpacity.rgb * lightFactor, diffuseOpacity.a);
}

vec4 getTexture(sampler2D tex, vec2 uv)
{
	return texture(tex, uv);
}

void main()
{
	vec3 position;
	vec3 normal;
	vec4 diffuseOpacity;
	vec4 specular;
	vec2 uv = CalcUV();

	position = getTexture(positionIn, uv).xyz;
	normal = getTexture(normalIn, uv).xyz;
	diffuseOpacity = getTexture(diffuseOpacityIn, uv);
	specular = getTexture(specularIn, uv);

	gl_FragColor = CalculateLighting(position, diffuseOpacity, normal, specular);
}